@model IEnumerable<ICRC.Model.ViewModel.CertificationViewModelForIndex>
@using GridMvc.Html
<div class="row">
    <div class="col-md-6">
        <a href="#" onclick="AddqueueFun()" class="linkbtn"><span class="glyphicon glyphicon-plus space" aria-hidden="true"></span>Add in Queue</a>
        <a href="#" onclick="gotoCreate('/Certifications/Create')" class="linkbtn"><span class="glyphicon glyphicon-plus space" aria-hidden="true"></span>Create new</a>
        <a href="#" id="btnImport" class="linkbtn" style="visibility:hidden"><span class="glyphicon glyphicon-import space" aria-hidden="true"></span>Import certifications</a>
        <a href="#" id="btnDownload" onclick="downloadExcel()" class="linkbtn" style="visibility:hidden"><span class="glyphicon glyphicon-import space" aria-hidden="true"></span>Download template</a>
    </div>
</div>
@*<script>
$(function(){
    $('#btn').click(function () {
        debugger;
        var str = window.location.href.split('?')[0]
        window.location.href = str;
    });
});
</script>
<div>
   
    <input id="btn" type="button" value="button" />
</div>*@

@Html.Grid(Model.OrderByDescending(a => a.ID)).Columns(columns =>
{
columns.Add()
.Encoded(false)
.Sanitized(false)
.SetWidth(30)
.Css("hidden-xs") //hide on phones
.RenderValueAs(c =>
    @<div id="" class="">
        <b>
            <input type="checkbox" data-id="@c.ID" data-toggle="tooltip" data-placement="bottom" name="add" class="add" title="Add in Queue" />
        </b>
    </div>);

columns.Add()
.Encoded(false)
.Sanitized(false)
.SetWidth(30)
.Css("hidden-xs") //hide on phones
.RenderValueAs(c =>
            @<div id="balloon" class="balloonClass">
                <b>
                    @*@Html.ActionLink("Edit", "Edit", new { id = c.ID }, new { @class = "modal_link", @Id = "editlink" })*@
                    <a href="#" onclick="gotoCreate('/Certifications/edit?id=@c.ID')" class="modal_link" id="editlink" data-toggle="tooltip" data-placement="bottom" title="Edit"><span class="glyphicon glyphicon-pencil space" aria-hidden="true"></span></a>
                </b>
            </div>);
                        columns.Add()
                                   .Encoded(false)
                                   .Sanitized(false)
                                   .SetWidth(30)
                                   .Css("hidden-xs") //hide on phones
                                   .RenderValueAs(c =>
                                @<div id="balloon" class="balloonClass">
                                    <b>
                                        <a href="#" onclick="confirmDelete('/Certifications/Delete/@c.ID','/CertifiedPersons')" data-toggle="tooltip" data-placement="bottom" title="Delete"><span class="glyphicon glyphicon-trash space" aria-hidden="true"></span></a>
                                    </b>
                                </div>);
                    columns.Add()
                    .Encoded(false)
                    .Sanitized(false)
                    .SetWidth(30)
                    .Css("hidden-xs") //hide on phones
                    .RenderValueAs(c =>
                    @<div id="balloon" class="balloonClass">
                        <b>
                            <a href="#" onclick="gotoCreate('/Certifications/details?id=@c.ID')" data-toggle="tooltip" data-placement="bottom" title="Details"><span class="glyphicon glyphicon-file space" aria-hidden="true"></span></a>
                        </b>
                    </div>);
                        columns.Add(c => c.LastName).Titled("Last Name");

                        columns.Add(c => c.FirstName).Titled("First Name");
                        columns.Add(c => c.MiddleName).Titled("Middle Name");
                        columns.Add(c => c.Email).Titled("Email");
                        //columns.Add(c => c.productType).Titled("Product Type");

                        columns.Add(c => c.Acronym).Titled("Board Acronym");
                        columns.Add(c => c.address).Titled("Address");
                        columns.Add(c => c.State).Titled("State");
                        columns.Add(c => c.CertificateAcronym).Titled("CertID");
                        columns.Add(c => c.CertificateNumber).Titled("Certificate No.");
                        columns.Add(c => c.CertIssueDate).Titled("Start Date").Format("{0:MM/dd/yyyy}");
                        columns.Add(c => c.RecertDate).Titled("State Recert. Date").Format("{0:MM/dd/yyyy}");


                    }).WithPaging(20).Sortable().Filterable().WithMultipleFilters()

<script src="~/Scripts/gridmvc.min.js"></script>

<script>
    function AddqueueFun() {
        debugger
        var ids = [];
       showOverLay();

        $.each($("input[name='add']:checked"), function () {
            ids.push($(this).attr('data-id'));
        });
        var id = ids.join(",")
        if (id != '') {
            $.ajax({
                url: '/Certifications/AddQueue/' + id,
                type: 'POST',
                data: { IDs: id },

                success: function (data) {
                    hideOverLay();
                    alert("added in Queue");
                   
                },
                error: function () {

                },
            })
        } else {

            alert('Please select item you want to add in queue');
            hideOverLay();
        }

    }

</script>










